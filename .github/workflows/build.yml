name: Build and Release

on:
  push:
    branches: [ "main" ]
  workflow_dispatch: # Allows manual triggering of the workflow

jobs:
  build:
    runs-on: ubuntu-latest
    permissions:
      contents: write # Required to create releases
    steps:
    - uses: actions/checkout@v3

    - name: set up JDK 17
      uses: actions/setup-java@v3
      with:
        java-version: '17'
        distribution: 'temurin'

    - name: Setup Gradle
      uses: gradle/gradle-build-action@v2
      with:
        gradle-version: 8.14.3

    - name: Make gradlew executable
      run: chmod +x gradlew

    - name: Decode Keystore
      # This step decodes the base64 encoded keystore secret and saves it as a file.
      # Ensure SIGNING_KEYSTORE_BASE64 is set in your GitHub Secrets.
      run: echo "${{ secrets.SIGNING_KEYSTORE_BASE64 }}" | base64 --decode > app/my-release-key.jks

    - name: Clean project
      # Cleans the build directory to ensure a fresh build.
      run: ./gradlew clean

    - name: Build with Gradle
      # Builds the release APK.
      # Ensure KEYSTORE_PASSWORD, KEY_ALIAS, and KEY_PASSWORD are set in your GitHub Secrets.
      run: ./gradlew assembleRelease
      env:
        KEYSTORE_PATH: app/my-release-key.jks
        KEYSTORE_PASSWORD: ${{ secrets.SIGNING_KEYSTORE_PASSWORD }}
        KEY_ALIAS: ${{ secrets.SIGNING_KEY_ALIAS }}
        KEY_PASSWORD: ${{ secrets.SIGNING_KEY_PASSWORD }}

    - name: Extract version name
      # Extracts the versionName from app/build.gradle to use in the release tag.
      id: version
      run: echo "VERSION_NAME=$(grep versionName app/build.gradle | sed -n 's/.*versionName \"\(.*\)\"/\1/p')" >> $GITHUB_ENV

    - name: List APK files
      # Lists the generated APK files for verification.
      run: ls -l app/build/outputs/apk/release/

    - name: Upload APK as artifact
      # Uploads the generated APK as a workflow artifact.
      uses: actions/upload-artifact@v4
      with:
        name: app-release-apk
        path: app/build/outputs/apk/release/app-release.apk

    - name: Create or Update Release
      # Creates a new GitHub Release or updates an existing one.
      # The GITHUB_TOKEN is automatically provided by GitHub Actions.
      uses: softprops/action-gh-release@v2
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: v${{ env.VERSION_NAME }}
        name: Release v${{ env.VERSION_NAME }}
        body: |
          Automated release for version ${{ env.VERSION_NAME }}
        draft: false
        prerelease: false
        files: app/build/outputs/apk/release/app-release.apk
        overwrite: true